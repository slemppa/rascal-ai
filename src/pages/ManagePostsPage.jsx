import React, { useState, useEffect, useRef } from 'react'
import { supabase } from '../lib/supabase'
import { useAuth } from '../contexts/AuthContext'
import './ManagePostsPage.css'

// Dummy data
const initialPosts = [
  {
    id: 1,
    title: 'Miten rakentaa menestyksek√§s sosiaalisen median strategia',
    status: 'Kesken',
    thumbnail: '/placeholder.png',
    caption: 'Opi t√§rkeimm√§t vaiheet tehokkaan sosiaalisen median strategian luomiseen.',
    createdAt: '2024-01-15'
  },
  {
    id: 2,
    title: '10 vinkki√§ parempaan sis√§lt√∂markkinointiin',
    status: 'Valmis',
    thumbnail: '/placeholder.png',
    caption: 'L√∂yd√§ todistetut strategiat sis√§lt√∂markkinoinnin parantamiseen.',
    createdAt: '2024-01-16'
  },
  {
    id: 3,
    title: 'Digitaalisen markkinoinnin tulevaisuus 2024',
    status: 'Ajastettu',
    thumbnail: '/placeholder.png',
    caption: 'Tutustu uusimpiin trendeihin ja teknologioihin.',
    scheduledDate: '2024-01-20'
  },
  {
    id: 4,
    title: 'Br√§nditietoisuuden rakentaminen sosiaalisessa mediassa',
    status: 'Julkaistu',
    thumbnail: '/placeholder.png',
    caption: 'Tehokkaat strategiat br√§ndin n√§kyvyyden lis√§√§miseen.',
    publishedAt: '2024-01-10'
  }
]

const columns = [
  { status: 'Kesken', title: 'Kesken', color: '#fef3c7' },
  { status: 'Tarkistuksessa', title: 'Tarkistuksessa', color: '#dbeafe' },
  { status: 'Aikataulutettu', title: 'Aikataulutettu', color: '#fce7f3' },
  { status: 'Julkaistu', title: 'Julkaistu', color: '#dcfce7' }
]

// Data muunnos funktio Supabase datasta Kanban muotoon
const transformSupabaseData = (supabaseData) => {
  if (!supabaseData || !Array.isArray(supabaseData)) return []
  
  return supabaseData.map(item => {
    // Muunnetaan Supabase status suomeksi
    const statusMap = {
      'Draft': 'Kesken',
      'In Progress': 'Kesken', 
      'Under Review': 'Tarkistuksessa',
      'Scheduled': 'Aikataulutettu',
      'Done': 'Tarkistuksessa',
      'Published': 'Julkaistu',
      'Deleted': 'Poistettu'
    }
    
    let status = statusMap[item.status] || 'Kesken'
    

    
    // Jos status on "Done" mutta publish_date on tulevaisuudessa, se on "Ajastettu"
    const now = new Date()
    const publishDate = item.publish_date ? new Date(item.publish_date) : null
    
    if (publishDate && publishDate > now && status === 'Julkaistu') {
      status = 'Aikataulutettu'
    }
    
    return {
      id: item.id,
      title: item.idea || item.caption || 'Nimet√∂n julkaisu',
      status: status,
      thumbnail: item.media_urls?.[0] || '/placeholder.png',
      caption: item.caption || item.idea || 'Ei kuvausta',
      type: item.type || 'Photo',
      createdAt: item.created_at ? new Date(item.created_at).toISOString().split('T')[0] : null,
      scheduledDate: item.publish_date && publishDate > now ? new Date(item.publish_date).toISOString().split('T')[0] : null,
      publishedAt: item.publish_date && publishDate <= now ? new Date(item.publish_date).toISOString().split('T')[0] : null,
      publishDate: item.publish_date ? new Date(item.publish_date).toISOString().slice(0, 16) : null,
      mediaUrls: item.media_urls || [],
      hashtags: item.hashtags || [],
      voiceover: item.voiceover || '',
      voiceoverReady: item.voiceover_ready || false,
      originalData: item, // S√§ilytet√§√§n alkuper√§inen data
      source: 'supabase'
    }
  })
}

// Transform Reels data to Kanban format
const transformReelsData = (reelsData) => {
  if (!reelsData || !Array.isArray(reelsData)) return []
  return reelsData.map(item => {
    const status = item.status || 'Kesken' // Status is forced to 'Kesken' by the API
    return {
      id: item.id,
      title: item.title || 'Nimet√∂n Reels',
      status: status,
      thumbnail: item.media_urls?.[0] || '/placeholder.png',
      caption: item.caption || 'Ei kuvausta',
      type: 'Reels',
      createdAt: item.created_at ? new Date(item.created_at).toISOString().split('T')[0] : null,
      scheduledDate: null,
      publishedAt: null,
      mediaUrls: item.media_urls || [],
      hashtags: item.hashtags || [],
      voiceover: item.voiceover || '',
      originalData: item,
      source: 'reels'
    }
  })
}

function PostCard({ post, onEdit, onDelete, onPublish, onSchedule }) {
  return (
    <div className="post-card">
      <div className="post-card-content">
        <img
          src={post.thumbnail}
          alt="thumbnail"
          className="post-thumbnail"
        />
                  <div className="post-info">
            <div className="post-header">
              <h3 className="post-title">
                {post.title.length > 50 ? post.title.slice(0, 50) + '‚Ä¶' : post.title}
              </h3>
              <div className="post-badges">
                <span className="post-type">{post.type}</span>
                <span className={`post-source ${post.source}`}>{post.source}</span>
          </div>
          </div>
            <p className="post-caption">
              {post.caption}
            </p>
          <div className="post-footer">
            <span className="post-date">
              {post.scheduledDate ? `üìÖ ${post.scheduledDate}` : post.createdAt || post.publishedAt}
            </span>
            <div className="post-actions">
              <button className="action-button" onClick={() => onEdit(post)}>
                ‚úèÔ∏è Muokkaa
              </button>
              {/* Ajastusnappi vain jos status on "Tarkistuksessa" */}
              {post.status === 'Tarkistuksessa' && (
                <button
                  className="action-button schedule" 
                  onClick={() => onSchedule(post)}
                  style={{
                    backgroundColor: '#f59e0b',
                    color: 'white',
                    border: 'none'
                  }}
                >
                  ‚è∞ Ajasta
                </button>
              )}
              {/* Julkaisu-nappi vain jos status on "Tarkistuksessa" tai "Aikataulutettu" */}
              {(post.status === 'Tarkistuksessa' || post.status === 'Aikataulutettu') && (
        <button
                  className="action-button publish" 
                  onClick={() => onPublish(post)}
                  style={{
                    backgroundColor: '#22c55e',
                    color: 'white',
                    border: 'none'
                  }}
                >
                  üì§ Julkaise
                </button>
              )}
              <button className="action-button delete" onClick={() => onDelete(post)}>
                üóëÔ∏è Poista
        </button>
      </div>
      </div>
    </div>
      </div>
    </div>
  )
}

export default function ManagePostsPage() {
  const { user } = useAuth()
  const [posts, setPosts] = useState([])
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)
  const [reelsPosts, setReelsPosts] = useState([])
  const [reelsLoading, setReelsLoading] = useState(false)
  const [reelsError, setReelsError] = useState(null)
  const [searchTerm, setSearchTerm] = useState('')
  const [statusFilter, setStatusFilter] = useState('')
  const [showCreateModal, setShowCreateModal] = useState(false)
  const [showEditModal, setShowEditModal] = useState(false)
  const [editingPost, setEditingPost] = useState(null)
  const hasInitialized = useRef(false)

  // Data haku Supabasesta
  const fetchPosts = async () => {
    if (!user) return
    
    try {
      setLoading(true)
      setError(null)
      
      // Haetaan k√§ytt√§j√§n user_id users taulusta
      const { data: userData, error: userError } = await supabase
        .from('users')
        .select('id')
        .eq('auth_user_id', user.id)
        .single()
      
      if (userError || !userData?.id) {
        throw new Error('K√§ytt√§j√§n ID ei l√∂ytynyt')
      }
      
      // Haetaan k√§ytt√§j√§n julkaisut
      const { data, error } = await supabase
        .from('content')
        .select('*')
        .eq('user_id', userData.id)
        .order('created_at', { ascending: false })
      
      if (error) {
        throw error
      }
      
      const transformedData = transformSupabaseData(data)
      setPosts(transformedData || [])
      
    } catch (err) {
      console.error('Virhe datan haussa:', err)
      setError('Datan haku ep√§onnistui')
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    if (!user || hasInitialized.current) return
    
    hasInitialized.current = true
    fetchPosts()
    fetchReelsPosts() // Haetaan reels data automaattisesti
  }, [user])

  // Reels data haku
  const fetchReelsPosts = async () => {
    if (!user) {
      return
    }
    
    // Asetetaan heti dummy dataa n√§kyviin
    const dummyData = [
      {
        id: 'reels-1',
        title: 'Ladataan Reels dataa...',
        caption: 'Haetaan dataa Airtablesta...',
        media_urls: ['/placeholder.png'],
        status: 'Kesken',
        created_at: new Date().toISOString(),
        hashtags: ['#ladataan'],
        voiceover: 'Ladataan...',
        source: 'reels'
      }
    ]
    setReelsPosts(dummyData)
    
    try {
      setReelsLoading(true)
      setReelsError(null)
      const { data: userData, error: userError } = await supabase
        .from('users')
        .select('company_id')
        .eq('auth_user_id', user.id)
        .single()
      if (userError || !userData?.company_id) {
        return
      }
      const response = await fetch(`/api/get-reels?companyId=${userData.company_id}`)
      if (!response.ok) {
        return
      }
      const data = await response.json()
      const transformedData = transformReelsData(data)
      setReelsPosts(transformedData)
    } catch (err) {
      console.error('Virhe Reels datan haussa:', err)
      // Pidet√§√§n dummy data n√§kyviss√§ virheen sattuessa
    } finally {
      setReelsLoading(false)
    }
  }



  // Transform Reels data to Kanban format
  const transformReelsData = (reelsData) => {
    if (!reelsData || !Array.isArray(reelsData)) return []
    return reelsData.map(item => {
      const status = item.status || 'Kesken' // Status is forced to 'Kesken' by the API
      const transformed = {
        id: item.id,
        title: item.title || 'Nimet√∂n Reels', // Boldattu otsikko = Title kentt√§
        status: status,
        thumbnail: item.media_urls?.[0] || '/placeholder.png',
        caption: item.caption || 'Ei kuvausta', // Leip√§teksti = Caption kentt√§
        type: 'Reels',
        createdAt: item.created_at ? new Date(item.created_at).toISOString().split('T')[0] : null,
        scheduledDate: null,
        publishedAt: null,
        mediaUrls: item.media_urls || [],
        hashtags: item.hashtags || [],
        voiceover: item.voiceover || '',
        originalData: item,
        source: 'reels'
      }
      console.log('Transformed reels item:', transformed) // Debug
      return transformed
    })
  }

  // Yhdistet√§√§n data
  const allPosts = [...posts, ...reelsPosts]
  const currentPosts = allPosts
  const currentLoading = loading || reelsLoading
  const currentError = error || reelsError

  // Filtter√∂id√§√§n postit
  const filteredPosts = currentPosts.filter(post => {
    const matchesSearch = (post.title?.toLowerCase() || '').includes(searchTerm.toLowerCase()) ||
                          (post.caption?.toLowerCase() || '').includes(searchTerm.toLowerCase())
    const matchesStatus = statusFilter === '' || post.status === statusFilter
    return matchesSearch && matchesStatus
  })

  const handleCreatePost = async (postData) => {
    try {
      // Haetaan k√§ytt√§j√§n user_id ja company_id users taulusta
      const { data: userData, error: userError } = await supabase
        .from('users')
        .select('id, company_id')
        .eq('auth_user_id', user.id)
        .single()
      
      if (userError || !userData?.id) {
        throw new Error('K√§ytt√§j√§n ID ei l√∂ytynyt')
      }

      // L√§hetet√§√§n idea-generation kutsu N8N:lle
      try {
        console.log('Sending idea generation request:', {
          idea: postData.title,
          type: postData.type,
          companyId: userData.company_id
        })
        console.log('Company ID type:', typeof userData.company_id)
        console.log('Company ID value:', userData.company_id)

        const response = await fetch('/api/idea-generation', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            idea: postData.title,
            type: postData.type,
            companyId: userData.company_id
          })
        })

        if (!response.ok) {
          console.error('Idea generation failed:', response.status)
          // Jatketaan silti postauksen luomista
        } else {
          const result = await response.json()
          console.log('Idea generation success:', result)
        }
      } catch (webhookError) {
        console.error('Idea generation webhook error:', webhookError)
        // Jatketaan silti postauksen luomista
      }

      setShowCreateModal(false)
      alert('Idea l√§hetetty AI:lle! Sis√§lt√∂ generoidaan taustalla.')
      
    } catch (error) {
      console.error('Virhe uuden julkaisun luomisessa:', error)
      alert('Virhe: Ei voitu luoda julkaisua. Yrit√§ uudelleen.')
    }
  }

  const handleEditPost = (post) => {
    console.log('=== handleEditPost called ===')
    console.log('Edit post:', post) // Debug
    console.log('Status:', post.status) // Debug status
    console.log('Source:', post.source) // Debug source
    console.log('All keys:', Object.keys(post)) // Debug kaikki kent√§t
    
    setEditingPost(post)
    setShowEditModal(true)
    console.log('Modal state set to true')
  }

  const handleSaveEdit = async (updatedData) => {
    if (editingPost) {
      // P√§ivit√§ paikallinen tila
      setPosts(prev => prev.map(post => 
        post.id === editingPost.id 
          ? { ...post, ...updatedData }
          : post
      ))
      
      // P√§ivit√§ my√∂s reelsPosts jos kyseess√§ on reels
      if (editingPost.source === 'reels') {
        setReelsPosts(prev => prev.map(post => 
          post.id === editingPost.id 
            ? { ...post, ...updatedData }
            : post
        ))
      }

                 // Jos voiceover on merkitty valmiiksi, kyseess√§ on reels-postaus JA se on "Kesken" sarakkeessa, l√§het√§ webhook
           if (updatedData.voiceoverReady && (editingPost.source === 'reels' || editingPost.type === 'Reels') && (editingPost.status === 'Kesken' || editingPost.source === 'reels')) {
             try {
               console.log('Voiceover marked as ready, sending webhook...')

               // Haetaan company_id k√§ytt√§j√§lle
               const { data: userData, error: userError } = await supabase
                 .from('users')
                 .select('company_id')
                 .eq('auth_user_id', user.id)
                 .single()

               if (userError || !userData?.company_id) {
                 console.error('Could not fetch company_id:', userError)
                 alert('Virhe: Ei voitu hakea yritystietoja. Yrit√§ uudelleen.')
                 return
               }

               console.log('Sending data:', {
                 recordId: editingPost.id,
                 voiceover: updatedData.voiceover,
                 voiceoverReady: updatedData.voiceoverReady,
                 companyId: userData.company_id
               })

               const response = await fetch('/api/voiceover-ready', {
                 method: 'POST',
                 headers: {
                   'Content-Type': 'application/json',
                 },
                 body: JSON.stringify({
                   recordId: editingPost.id,
                   voiceover: updatedData.voiceover,
                   voiceoverReady: updatedData.voiceoverReady,
                   companyId: userData.company_id
                 })
               })

          if (!response.ok) {
            console.error('Voiceover webhook failed:', response.status)
            // N√§yt√§ k√§ytt√§j√§lle virheviesti
            alert('Virhe voiceover-tilan p√§ivityksess√§. Yrit√§ uudelleen.')
            return
          }

          const result = await response.json()
          console.log('Voiceover webhook success:', result)
          
          // N√§yt√§ k√§ytt√§j√§lle onnistumisviesti
          alert('Voiceover merkitty valmiiksi! Automaatio jatkaa eteenp√§in.')
          
        } catch (error) {
          console.error('Voiceover webhook error:', error)
          alert('Virhe voiceover-tilan p√§ivityksess√§. Yrit√§ uudelleen.')
          return
        }
      }

      // P√§ivit√§ Supabase kaikille postauksille
      try {
        console.log('Updating Supabase post:', editingPost.id, updatedData)

        // Haetaan k√§ytt√§j√§n user_id users taulusta
        const { data: userData, error: userError } = await supabase
          .from('users')
          .select('id')
          .eq('auth_user_id', user.id)
          .single()

        if (userError || !userData?.id) {
          console.error('Could not fetch user_id:', userError)
          // Jatketaan silti paikallisen tilan p√§ivityst√§
        } else {
                      // P√§ivitet√§√§n Supabase
            const { error: updateError } = await supabase
              .from('content')
              .update({
                caption: updatedData.caption || null,
                publish_date: updatedData.publishDate || null,
                updated_at: new Date().toISOString()
              })
              .eq('id', editingPost.id)
              .eq('user_id', userData.id)

          if (updateError) {
            console.error('Supabase update error:', updateError)
            // Jatketaan silti paikallisen tilan p√§ivityst√§
          } else {
            console.log('Supabase updated successfully')
          }
        }
      } catch (error) {
        console.error('Error updating Supabase:', error)
        // Jatketaan silti paikallisen tilan p√§ivityst√§
      }
      
      setShowEditModal(false)
      setEditingPost(null)
    }
  }

  const handleDeletePost = async (post) => {
    if (window.confirm('Oletko varma, ett√§ haluat poistaa t√§m√§n julkaisun?')) {
      try {
        // Haetaan k√§ytt√§j√§n data
        const { data: userData, error: userError } = await supabase
          .from('users')
          .select('id')
          .eq('auth_user_id', user.id)
          .single()

        if (userError || !userData?.id) {
          throw new Error('K√§ytt√§j√§n ID ei l√∂ytynyt')
        }

        // L√§hetet√§√§n delete-kutsu N8N:iin
        const deleteData = {
          post_id: post.id,
          user_id: userData.id,
          auth_user_id: user.id,
          content: post.caption || post.title,
          media_urls: post.mediaUrls || [],
          action: 'delete'
        }

        const response = await fetch('/api/post-actions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(deleteData)
        })

        const result = await response.json()

        if (!response.ok) {
          throw new Error(result.error || 'Poisto ep√§onnistui')
        }

        // P√§ivitet√§√§n UI
        await fetchPosts()
        if (post.source === 'reels') {
          await fetchReelsPosts()
        }

        alert(result.message || 'Post poistettu onnistuneesti!')
        
      } catch (error) {
        console.error('Delete error:', error)
        alert('Poisto ep√§onnistui: ' + error.message)
      }
    }
  }

  const handleSchedulePost = async (post) => {
    try {
      // Haetaan k√§ytt√§j√§n data
      const { data: userData, error: userError } = await supabase
        .from('users')
        .select('id')
        .eq('auth_user_id', user.id)
        .single()

      if (userError || !userData?.id) {
        throw new Error('K√§ytt√§j√§n ID ei l√∂ytynyt')
      }

      // Kysyt√§√§n ajastusp√§iv√§ k√§ytt√§j√§lt√§
      const scheduledDate = prompt('Sy√∂t√§ ajastusp√§iv√§ (YYYY-MM-DD HH:MM):', 
        new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString().slice(0, 16))

      if (!scheduledDate) {
        return // K√§ytt√§j√§ perui
      }

      // L√§hetet√§√§n yksinkertainen kutsu N8N:iin
      const scheduleData = {
        post_id: post.id,
        user_id: userData.id,
        auth_user_id: user.id,
        content: post.caption || post.title,
        media_urls: post.mediaUrls || [],
        scheduled_date: scheduledDate,
        action: 'schedule'
      }

              const response = await fetch('/api/post-actions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(scheduleData)
        })

      const result = await response.json()

      if (!response.ok) {
        throw new Error(result.error || 'Ajastus ep√§onnistui')
      }

      // P√§ivitet√§√§n UI
      await fetchPosts()
      if (post.source === 'reels') {
        await fetchReelsPosts()
      }

      alert(result.message || 'Ajastus onnistui!')
      setShowEditModal(false)
      setEditingPost(null)
      
    } catch (error) {
      console.error('Schedule error:', error)
      alert('Ajastus ep√§onnistui: ' + error.message)
    }
  }

  const handlePublishPost = async (post) => {
    try {
      // Haetaan k√§ytt√§j√§n data
      const { data: userData, error: userError } = await supabase
        .from('users')
        .select('id')
        .eq('auth_user_id', user.id)
        .single()

      if (userError || !userData?.id) {
        throw new Error('K√§ytt√§j√§n ID ei l√∂ytynyt')
      }

      // L√§hetet√§√§n yksinkertainen kutsu N8N:iin
      const publishData = {
        post_id: post.id,
        user_id: userData.id,
        auth_user_id: user.id,
        content: post.caption || post.title,
        media_urls: post.mediaUrls || [],
        scheduled_date: post.scheduledDate || null,
        action: 'publish'
      }

              const response = await fetch('/api/post-actions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(publishData)
        })

      const result = await response.json()

      if (!response.ok) {
        throw new Error(result.error || 'Julkaisu ep√§onnistui')
      }

      // P√§ivitet√§√§n UI
      await fetchPosts()
      if (post.source === 'reels') {
        await fetchReelsPosts()
      }

      alert(result.message || 'Julkaisu onnistui!')
      setShowEditModal(false)
      setEditingPost(null)
      
    } catch (error) {
      console.error('Publish error:', error)
      alert('Julkaisu ep√§onnistui: ' + error.message)
    }
  }

  // ESC-n√§pp√§imell√§ sulkeutuminen
  useEffect(() => {
    const handleEscKey = (event) => {
      if (event.key === 'Escape') {
        if (showEditModal) {
          setShowEditModal(false)
          setEditingPost(null)
        }
        if (showCreateModal) {
          setShowCreateModal(false)
        }
      }
    }

    if (showEditModal || showCreateModal) {
      document.addEventListener('keydown', handleEscKey)
      return () => document.removeEventListener('keydown', handleEscKey)
    }
  }, [showEditModal, showCreateModal])

       // Merkkien laskenta "Tarkistuksessa" sarakkeelle ja create modaliin
  useEffect(() => {
    if (showEditModal && editingPost && editingPost.status === 'Tarkistuksessa') {
      const textarea = document.querySelector('.form-textarea')
      const charCount = document.querySelector('.char-count')

      if (textarea && charCount) {
        const updateCharCount = () => {
          const count = textarea.value.length
          charCount.textContent = count

          // Vaihda v√§ri√§ jos yli 2000 merkki√§
          if (count > 2000) {
            charCount.style.color = '#ef4444'
          } else if (count > 1800) {
            charCount.style.color = '#f59e0b'
          } else {
            charCount.style.color = '#3B82F6'
          }
        }

        textarea.addEventListener('input', updateCharCount)
        updateCharCount() // Alustetaan laskenta

        return () => textarea.removeEventListener('input', updateCharCount)
      }
    }
  }, [showEditModal, editingPost])



  

  return (
    <div className="posts-page">
      {/* Page Header */}
      <div className="page-header">
        <h1>Julkaisut</h1>
        <p>Hallitse ja seuraa sis√§lt√∂si eri vaiheissa</p>
      </div>

      {/* Search and Filters */}
      <div className="search-filters">
        <input
          type="text"
          placeholder="Etsi julkaisuja..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="search-input"
        />
        <select 
          value={statusFilter} 
          onChange={(e) => setStatusFilter(e.target.value)}
          className="status-filter"
        >
          <option value="">Kaikki statukset</option>
          <option value="Kesken">Kesken</option>
          <option value="Tarkistuksessa">Tarkistuksessa</option>
          <option value="Aikataulutettu">Aikataulutettu</option>
          <option value="Julkaistu">Julkaistu</option>
        </select>
        <button 
          className="create-button"
          onClick={() => setShowCreateModal(true)}
        >
          + Luo uusi julkaisu
        </button>
      </div>

      {/* Error State */}
      {currentError && (
        <div className="error-state">
          <p>‚ùå {currentError}</p>
          <button
            onClick={() => {
              window.location.reload()
            }} 
            className="retry-button"
          >
            Yrit√§ uudelleen
          </button>
        </div>
      )}
        
      {/* Kanban Board */}
      {!currentError && (
        <div className="kanban-board">
          {columns.map(column => {
            const columnPosts = filteredPosts.filter(post => post.status === column.status)
            return (
              <div key={column.status} className="kanban-column">
                <h3 className="column-title">{column.title}</h3>
                <div className="column-content">
                  {/* Loading state vain "Kesken" sarakkeessa */}
                  {column.status === 'Kesken' && currentLoading && (
                    <div className="column-loading">
                      <div className="loading-spinner"></div>
                      <p>Ladataan Reels...</p>
                    </div>
                  )}
                  
                  {/* N√§yt√§ postit aina, paitsi "Kesken" sarakkeessa kun loading */}
                  {!(column.status === 'Kesken' && currentLoading) && columnPosts.map(post => {
                    // Varmistetaan ett√§ post on oikeassa muodossa
                    const safePost = {
                      id: post.id || 'unknown',
                      title: post.title || 'Nimet√∂n julkaisu',
                      caption: post.caption || 'Ei kuvausta',
                      type: post.type || 'Photo',
                      source: post.source || 'supabase',
                      thumbnail: post.thumbnail || '/placeholder.png',
                      status: post.status || 'Kesken' // Lis√§t√§√§n status!
                    }
                    
                    
                    
                    return (
                      <PostCard
                        key={safePost.id}
                        post={safePost}
                        onEdit={handleEditPost}
                        onDelete={handleDeletePost}
                        onPublish={handlePublishPost}
                        onSchedule={handleSchedulePost}
                      />
                    )
                  })}
                </div>
              </div>
            )
          })}
          </div>
        )}

      {/* Create Modal */}
      {showCreateModal && (
        <div 
          className="modal-overlay"
          onClick={(e) => {
            if (e.target === e.currentTarget) {
              setShowCreateModal(false)
            }
          }}
        >
          <div className="modal">
            <div className="modal-header">
              <h2>Luo uusi julkaisu</h2>
              <button
                onClick={() => setShowCreateModal(false)}
                className="modal-close"
              >
                ‚úï
              </button>
            </div>
            <form onSubmit={(e) => {
              e.preventDefault()
              const formData = new FormData(e.target)
              handleCreatePost({
                title: formData.get('title'),
                caption: formData.get('caption')
              })
            }} className="modal-form">
              <div className="form-group">
                <label>Otsikko</label>
                <input
                  name="title"
                  type="text"
                  required
                  className="form-input"
                  placeholder="Sy√∂t√§ julkaisun otsikko..."
                />
                  </div>
              <div className="form-group">
                <label>Kuvaus</label>
            <textarea
                  name="caption"
                  rows={4}
                  className="form-textarea"
              placeholder="Kirjoita julkaisun kuvaus..."
            />
              </div>
              <div className="modal-actions">
              <button
                type="button"
                  onClick={() => setShowCreateModal(false)}
                  className="cancel-button"
              >
                  Peruuta
              </button>
                    <button
                  type="submit"
                  className="submit-button"
                    >
                  Luo julkaisu
            </button>
          </div>
        </form>
      </div>
    </div>
        )}

              {/* Edit Modal */}
        {showEditModal && editingPost && (
        <div 
          className="modal-overlay"
          onClick={(e) => {
            if (e.target === e.currentTarget) {
              setShowEditModal(false)
              setEditingPost(null)
            }
          }}
        >
          <div className="modal">
                         <div className="modal-header">
               <h2>
                 {editingPost.status === 'Kesken' ? 'Voiceover-tarkistus' : 'Muokkaa julkaisua'}
               </h2>
               {/* Debug: N√§yt√§ status */}
               <div style={{ fontSize: '12px', color: '#666', marginTop: '4px' }}>
                 Status: {editingPost.status} | Source: {editingPost.source}
               </div>
              <button
                onClick={() => {
                  setShowEditModal(false)
                  setEditingPost(null)
                }}
                className="modal-close"
              >
                ‚úï
              </button>
            </div>
            <form onSubmit={(e) => {
              e.preventDefault()
              const formData = new FormData(e.target)
                             handleSaveEdit({
                 title: formData.get('title'),
                 caption: formData.get('caption'),
                 voiceover: formData.get('voiceover'),
                 publishDate: formData.get('publishDate'),
                 voiceoverReady: formData.get('voiceoverReady') === 'on',
                 type: formData.get('type'),
                 status: formData.get('status')
               })
            }} className="modal-form">
              
              {/* Video Player / Thumbnail */}
              <div className="video-player">
                <div className="video-container">
                  {editingPost.thumbnail && editingPost.thumbnail !== '/placeholder.png' ? (
                    <video 
                      src={editingPost.thumbnail} 
                      controls 
                      className="video-element"
                      poster={editingPost.thumbnail}
                    >
                      Your browser does not support the video tag.
                    </video>
                  ) : (
                    <div className="video-placeholder">
                      <span className="video-icon">üé•</span>
                      <p>Ei videota saatavilla</p>
                    </div>
                  )}
                </div>
              </div>

                             {/* Tabs */}
               <div className="content-tabs">
                 <button type="button" className="tab-button active">
                   {editingPost.source === 'reels' ? 'üé¨ Reels' : `üì∏ ${editingPost.type || 'Post'}`}
                 </button>
                 <button type="button" className="tab-button">
                   {editingPost.source === 'reels' ? 'üéôÔ∏è Voiceover' : 'üìä Status'}
                 </button>
               </div>

                             {/* Content Fields */}
               <div className="content-fields">
                 {/* "Kesken" sarakkeessa: Voiceover-muokkaus */}
                 {editingPost.status === 'Kesken' && (
                   <div className="form-group">
                     <label>Voiceover</label>
                     <textarea
                       name="voiceover"
                       rows={8}
                       className="form-textarea"
                       defaultValue={editingPost.voiceover || "Oletko innovaattori? Kuvittele maailma, jossa AI k√§sittelee asiakaspalvelupuhelut puolestasi. N√§yt√§mme, miten t√§m√§ teknologia voi mullistaa yrityksesi toiminnan, parantaen tiimisi tehokkuutta ja myyntituloksia. Anna ty√∂ntekij√∂idesi keskitty√§ siihen, miss√§ he loistavat, samalla kun teko√§ly hoitaa rutiiniteht√§v√§t. Astu kanssamme tulevaisuuteen, jossa ty√∂skentely on entist√§kin sujuvampaa."}
                       placeholder="Kirjoita voiceover-teksti..."
                     />
                     <div className="voiceover-checkbox">
                       <label className="checkbox-label">
                         <input 
                           type="checkbox" 
                           name="voiceoverReady" 
                           defaultChecked={editingPost.voiceoverReady}
                         />
                         <span className="checkbox-text">Vahvistan ett√§ voiceover on valmis ja tarkistettu</span>
                       </label>
                     </div>
                   </div>
                 )}

                 {/* "Tarkistuksessa" sarakkeessa: Captions-muokkaus + voiceover (readonly) */}
                 {editingPost.status === 'Tarkistuksessa' && (
                   <>
                     <div className="form-group">
                       <label>Kuvaus</label>
                       <textarea
                         name="caption"
                         rows={6}
                         className="form-textarea"
                         defaultValue={editingPost.caption || "Oletko valmis muuttamaan yrityksesi toimintamallit? AI voi hoitaa puhelut, jotta sin√§ voit keskitty√§ suureen kuvaan. Tartu tilaisuuteen ja modernisoi asiakashankintasi.üóùÔ∏è ja t√§g√§√§ joku, joka hy√∂tyisi t√§st√§ innovaatiosta! #Teko√§ly #Yritt√§jyys #Kasvu #Teko√§ly #Yritt√§jyys #Asiakashankinta #Valmennus #RascalCompany"}
                         placeholder="Kirjoita julkaisun kuvaus..."
                       />
                       <div className="char-counter">
                         <span className="char-count">0</span> / 2200 merkki√§
      </div>
                     </div>

                     {/* Voiceover n√§kyy vain jos kyseess√§ on Reels */}
                     {(editingPost.source === 'reels' || editingPost.type === 'Reels') && (
                       <div className="form-group">
                         <label>Voiceover (vain luku)</label>
                         <textarea
                           name="voiceover"
                           rows={4}
                           className="form-textarea"
                           defaultValue={editingPost.voiceover || ""}
                           placeholder="Voiceover-teksti..."
                           readOnly
                           style={{ backgroundColor: '#f8f9fa', color: '#6c757d' }}
                         />
                       </div>
                     )}
                   </>
                 )}

                 {/* Muissa sarakkeissa: Perusmuokkaus */}
                 {editingPost.status !== 'Kesken' && editingPost.status !== 'Tarkistuksessa' && (
                   <div className="form-group">
                     <label>Kuvaus</label>
                     <textarea
                       name="caption"
                       rows={4}
                       className="form-textarea"
                       defaultValue={editingPost.caption || ""}
                       placeholder="Kirjoita julkaisun kuvaus..."
                     />
                   </div>
                 )}

                 <div className="form-group">
                   <label>Julkaisup√§iv√§</label>
                   <input
                     name="publishDate"
                     type="datetime-local"
                     className="form-input"
                     defaultValue={editingPost.publishDate || ""}
                     placeholder="pp.kk.vvvv klo --:--"
                   />
                 </div>
               </div>
              <div className="modal-actions">
          <button
                  type="button"
                  onClick={() => {
                    setShowEditModal(false)
                    setEditingPost(null)
                  }}
                  className="cancel-button"
                >
                  Peruuta
          </button>
            <button
                  type="submit"
                  className="submit-button"
            >
                  Tallenna
            </button>
                {/* Julkaisu-nappi vain jos status on "Tarkistuksessa" tai "Aikataulutettu" */}
                {(editingPost.status === 'Tarkistuksessa' || editingPost.status === 'Aikataulutettu') && (
                  <button
                    type="button"
                    onClick={() => handlePublishPost(editingPost)}
                    className="publish-button"
                    style={{
                      backgroundColor: '#22c55e',
                      color: 'white',
                      border: 'none',
                      padding: '12px 24px',
                      borderRadius: '8px',
                      cursor: 'pointer',
                      fontWeight: '600',
                      marginLeft: '8px'
                    }}
                  >
                    üì§ Julkaise
                  </button>
                )}
                <button
                  type="button"
                  onClick={() => {
                    if (window.confirm('Oletko varma, ett√§ haluat poistaa t√§m√§n julkaisun?')) {
                      handleDeletePost(editingPost)
                      setShowEditModal(false)
                      setEditingPost(null)
                    }
                  }}
                  className="delete-button"
                >
                  Poista
                </button>
              </div>
            </form>
          </div>
          </div>
        )}

        {/* Create Modal */}
        {showCreateModal && (
          <div
            className="modal-overlay"
            onClick={(e) => {
              if (e.target === e.currentTarget) {
                setShowCreateModal(false)
              }
            }}
          >
            <div className="modal">
              <div className="modal-header">
                <h2>Luo uusi julkaisu</h2>
                <button
                  onClick={() => setShowCreateModal(false)}
                  className="modal-close"
                >
                  ‚úï
                </button>
                  </div>
              <form onSubmit={(e) => {
                e.preventDefault()
                const formData = new FormData(e.target)
                handleCreatePost({
                  title: formData.get('title'),
                  type: formData.get('type')
                })
                setShowCreateModal(false)
              }} className="modal-form">
                
                <div className="content-fields">
                  <div className="form-group">
                    <label>Idea</label>
                    <input
                      name="title"
                      type="text"
                      className="form-input"
                      placeholder="Kirjoita julkaisun idea..."
                      required
                    />
                    </div>

                  <div className="form-group">
                    <label>Julkaisun tyyppi</label>
                    <select name="type" className="form-select" required>
                      <option value="">Valitse tyyppi</option>
                      <option value="Photo">üì∏ Photo</option>
                      <option value="Carousel">üñºÔ∏è Carousel</option>
                      <option value="Reels">üé¨ Reels</option>
                      <option value="Blog">üìù Blog</option>
                      <option value="Newsletter">üìß Newsletter</option>
                      <option value="LinkedIn">üíº LinkedIn</option>
                    </select>
                  </div>
                </div>

                <div className="modal-actions">
                    <button
                    type="button"
                    onClick={() => setShowCreateModal(false)}
                    className="cancel-button"
                  >
                    Peruuta
                  </button>
                  <button
                    type="submit"
                    className="submit-button"
                  >
                    Luo julkaisu
                    </button>
                  </div>
              </form>
                </div>
          </div>
        )}
    </div>
  )
}